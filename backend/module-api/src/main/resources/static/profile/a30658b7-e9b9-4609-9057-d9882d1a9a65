# 2022-10-16-Entity와 DTO의 변환(modelMapper 등)

최근 개인적으로 프로젝트를 시작하면서 Entity에서 DTO로 DTO에서 Entity로 변환이 어디서 어떻게 되어야 하는지 궁금해져 알아보고 정리하게 되었습니다.

- DTO(Data Transfer Object) : 계층간의 데이터 전달 목적으로 사용되는 객체
- Entity : 데이터베이스 테이블과 매핑되는 클래스

사람마다 개발 성향에 따라 다르지만 이러한 object간의 변화를 줄이기 위하여 modelMapper 그리고 빌더 패턴을 이용한 object간의 변화를 많이 사용하는것 같습니다.

[modelMapper를 사용하면 컴파일 시점에 오류를 잡을수 없기 때문에 잘 사용하지 않으시는분도 계신거 같습니다.](https://www.inflearn.com/questions/69827)

그래서 제가 정리할 내용은 modelMapper 라이브러리를 사용한 방법 그리고 빌더 패턴을 사용한 방법 두가지로 정리해 보도록 하겠습니다.

### modelMapper

첫번째 modelMapper입니다. 

기본적으로 modelMapper 의존성을  추가해주는 작업이 필요합니다.

```xml
// model mapper
implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.6'
```

modelMapper을 반복적으로 여러 로직에 사용되기 때문에 @Bean으로 등록해서 사용합니다.

```java
@Configuration
public class AppConfig{

		@Bean
		public ModelMapper modelMapper(){
				return new ModelMapper();
		}
}
```

사용 방법

map(source, destination) 메서드를 활용하여 Data를 객체에 적용할수 있습니다.

```java
TestEntity testEntity = testRepository.findById("panda");
//testRepository.findById로 뽑아온 testEntity 객체를 전달
TestDto testDto = modelMapper.map(testEntity, TestDto.class); 
```

Entity 클래스 객체와 Dto 객체의 프로퍼티가 다른경우에 매핑 전략을 설정하여 최선의 매핑 과정을 수행하게 됩니다.

또한 여러가지 매핑 전략등의 자세한 내용이 있는데 이러한 내용은 상세하게 따로 정리할 예정입니다.

### Builder 패턴

builder 패턴은 제가 사실상 제일 많이 사용하는 매핑 방식입니다.

```java
public class MemberDto{
	
	private String email;

	private String password;

	private String username;

	public Member toEntity(){
			return Member.builder()
								.email(email)
								.password(password)
								.username(username)
								.build();
		}
}
```

위와 같이 Dto → Member 객체로 만들때 Builder 패턴을 사용하였습니다.

이렇게 하면 따로 Member 클래스에 Setter를 열지 않고 Builder로만 변환이 가능합니다.

### Reference

- JPA 프로그래밍 , 김영한 (Inflearn)